podTemplate(
    cloud: 'kubernetes',
    nodeSelector: 'disktype=ssd',
    label: 'mypod1',
    podRetention: never(),
    containers: [
        containerTemplate(name: 'jnlp', image: 'jenkins/inbound-agent:4.3-4', args: '${computer.jnlpmac} ${computer.name}', alwaysPullImage: false),
        containerTemplate(name: 'maven', image: 'maven:3.5.4-jdk-8-slim', command: 'cat', ttyEnabled: true, alwaysPullImage: false),
        containerTemplate(name: 'docker', image: 'docker:18.06.1', command: 'cat', ttyEnabled: true, alwaysPullImage: false)
    ],
    volumes: [
        hostPathVolume(mountPath: '/var/run/docker.sock', hostPath: '/var/run/docker.sock'),
        hostPathVolume(mountPath: '/home/jenkins/agent', hostPath: '//c/Users/karigar/mounted'),
        hostPathVolume(mountPath: '/root/.m2', hostPath: '//c/Users/karigar/.m2')
    ])
    {
    node('mypod1') {
    
        stage('Checkout') {
            checkout scm
        }
        
        stage('Build') {
            container('maven') {
                sh 'ls -ltr'
                sh 'mvn clean package'
            }
        }
        
        stage('Check running containers') {
            container('docker') {
                sh 'hostname'
                sh 'hostname -i'
                //sh 'docker ps'
                /*withCredentials([string(credentialsId: 'dockerhub_id', variable: 'docker-hub')]) {
                  sh "docker login -u karigar -p ${docker-hub}"
                }*/
                
                withCredentials([usernamePassword(credentialsId: 'dockerhub_id', passwordVariable: 'PWD', usernameVariable: 'USR')]){
                    sh "docker login -u ${USR} -p ${PWD}"
                    sh "docker build -t karigar/promo-app:$BUILD_NUMBER ."
                    sh "docker push karigar/promo-app:$BUILD_NUMBER"
                }
            }
        }
    }
}
